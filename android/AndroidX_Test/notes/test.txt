1. Splash页ViewModel -- startSplash_shouldGetImageFromHttp()
HttpEngine没有考虑线程
所以需要SplashViewModel来考虑线程:
viewModelScope.launch(Dispatcher.IO){
    resp = httpEngine.splash()
}

[对策]
这时的测试, 就得将上面的Dispatcher.IO改为注入的,
这样我们才能注入TestCoroutineDispatcher

[后注]
后来发现不注入这样我们才能注入TestCoroutineDispatcher也没事
只要有InstantTaskExecutorRule就行了, 它会把其它线程的事变为main线程上的来运行
(上面的注入做法, 就做为一种思路吧)

2. Splash页ViewModel -- startSplash_shouldNavToNextPage()
这里就一定要注入TestCoroutineDispatcher
光有InstantTaskExecutorRule是不够的
原因嘛, 看这两个类的源码就知道了

3. Splash页ViewModel -- 两个测试
有了InstantTaskExecutorRule, 连runBlocking, runBlockingTest都不需要了

4. Splash页Activity
1). 难点1
mock并注入我们的mockPresenter后, 就可以调用presenter的方法
但ViewModel的 LiveData 要在onCreate()中注册, 这样即使替换了vm, 这个vm.livedata.observer()还是用的老vm

(==> 方法不是没有, 就是把vm.liveData.observer()放到一个额外方法里, 比如说listen(). 然后onCreate()中调用listen().
到了测试里, 就mock并注入mockVm后, 再在测试中拖动调用actv.listen(), 就行了)

2). 难点2
Picasso这些库也会有问题, 比如说我就碰到过个Error:
Exception in thread "DefaultDispatcher-worker-1 @coroutine#1" java.lang.IllegalStateException: context == null
	at com.squareup.picasso.Picasso.get(Picasso.java:681)

(这个暂时无解, 只好说暂时不走Activity的单元测试. 要测试就走Espresso的集成测试吧)


